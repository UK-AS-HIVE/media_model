<?php

function media_model_file_view_alter(&$build, $type = 'file') {
  // check to make sure it's a file type we support
  if (!isset($build['file']['#file']))
    return;
  $filename = $build['file']['#file']->filename;
  $extension = substr($filename, strlen($filename)-4);
  if ($extension != '.obj')
    return;

  $build['file']['#file']->type = 'model';
  $build['file']['#theme'] = 'model';
}


/**
 * Implements hook_file_formatter_info().
 */
function media_model_file_formatter_info() {
}

/**
 * Implements hook_field_formatter_info().
 */
function media_model_field_formatter_info() {
  $formatters = array();
/*
  $formatters['glge_objloader'] = array(
    'label' => t('GLGE Wavefront .OBJ viewer'),
    'field types' => array('file', 'model'),
    'settings' => array(
      'width' => variable_get('glge_objloader', '640'),
      'height' => variable_get('glge_objloader', '385'),
    ),
  );*/

    $formatters['threejs_objloader'] = array(
    'label' => t('ThreeJS .OBJ viewer'),
    'field types' => array('file', 'model'),
    'settings' => array(
      'width' => variable_get('threejs_objloader', '640'),
      'height' => variable_get('threejs_objloader', '385'),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_theme().
 */
function media_model_theme($existing) {
  //dpm($existing);
  return array(
    'model' => array(
      /*'variables' => array(
        'attributes' => array(), 
        'settings' => array(),
      ),*/
      'render element' => 'element',
    ),
  );
}

function media_model_get_materials( $objFileName, $objPath){
  $mmDir = 'public://media_model_files/';
  $baseMtlPath = str_replace('.obj', '.mtl', $objPath);
  $baseJpgPath = str_replace('.obj', '.jpg', $objPath);
  //dpm(file_create_url($baseMtlPath));
  $objName = str_replace('.obj', '', $objFileName);

  $types = array(
    'low' => 512,
    'med' => 2048,
    'high' => 4096,
  );
  $mtlPaths = array();

  file_prepare_directory($mmDir, FILE_CREATE_DIRECTORY);
  if(is_writable($mmDir)) {
    $modMtlPath = $mmDir . $objName . '_default.mtl';
    if(!file_exists($modMtlPath)){
      $mtlBody = file_get_contents($baseMtlPath);
      file_put_contents($modMtlPath, str_replace($objName . '.jpg', file_create_url($baseJpgPath), $mtlBody));
    }
    $mtlPaths['default'] = file_create_url($modMtlPath);
    foreach($types as $type => $pixels) {
      $modMtlPath = $mmDir . $objName . '_' . $type . '.mtl';
      $modJpgPath = $mmDir . $objName . '_' . $type . '.jpg';
      if(!file_exists($modMtlPath)){
        $mtlBody = file_get_contents($baseMtlPath);
        file_put_contents($modMtlPath, str_replace($objName . '.jpg', file_create_url($modJpgPath), $mtlBody));
      }
      if(!file_exists($modJpgPath)){
        $command = 'convert ' . drupal_realpath($baseJpgPath) . ' -resize ' . $pixels . 'x' . $pixels . ' '. drupal_realpath($modJpgPath);
        exec($command, $output=array());
        //dpm($output);
      }
      $mtlPaths[$type] = file_create_url($modMtlPath);
    }
  }
  
  return $mtlPaths;
}

function media_model_get_normals( $objFileName, $objPath ){
  $mmDir = 'public://media_model_files/';
  $objName = str_replace('.obj', '', $objFileName);
  $basePngPath = str_replace('.obj', '_normal.png', $objPath);
  //dpm(file_create_url($basePngPath));

  $types = array(
    'low' => 512,
    'med' => 2048,
    'high' => 4096,
  );
  $mtlPaths = array();

  file_prepare_directory($mmDir, FILE_CREATE_DIRECTORY);
  if(is_writable($mmDir)) {
    $nmlPaths['default'] = file_create_url($mmDir . $objName . '_normal.png');
    foreach($types as $type => $pixels) {
      $modPngPath = $mmDir . $objName . '_normal_' . $type . '.png';
      if(!file_exists($modPngPath)){
        $command = 'convert ' . drupal_realpath($basePngPath) . ' -resize ' . $pixels . 'x' . $pixels . ' '. drupal_realpath($modPngPath);
        exec($command, $output=array());
        //dpm($output);
      }
      $nmlPaths[$type] = file_create_url($modPngPath);
    }
  }
  
  return $nmlPaths;
}

function media_model_get_objs( $objFileName, $baseObjPath){
  $mmDir = 'public://media_model_files/';
  $objName = str_replace('.obj', '', $objFileName);

  $types = array(
    'low' => 5000,
    'med' => 50000,
    'high' => 200000,
  );
  $objPaths = array(
      'default' => file_create_url($baseObjPath)
  );

  file_prepare_directory($mmDir, FILE_CREATE_DIRECTORY);

  if(is_writable($mmDir)) {
    foreach($types as $type => $polycount) {
      $modObjPath = $mmDir . $objName . '_' . $type . '.obj';
      $objPaths[$type] = file_exists($modObjPath) ? file_create_url($modObjPath) : null;
    }
  }
  return $objPaths;
}


function theme_model($variables) {
  static $id=0;
  $objPath = file_create_url($variables['element']['#file']->uri); 

  $mediaPath = drupal_get_path('module', 'media_model');

  $mtlPaths = media_model_get_materials($variables['element']['#file']->filename, $variables['element']['#file']->uri);
  $nmlPaths = media_model_get_normals($variables['element']['#file']->filename, $variables['element']['#file']->uri);
  $objPaths = media_model_get_objs($variables['element']['#file']->filename, $variables['element']['#file']->uri);

  drupal_add_library('system', 'ui.dialog');
  $output = '
  <div id="media-model-edit-note-form" title="Save/edit annotation">
    <div id="media-model-edit-note-form-inner">
      <div id="media-model-edit-note-form">
  <form>
  <fieldset id="media-model-edit-fieldset">
    <label for="media-model-edit-note-title">Title (optional)</label>
    <input type="textfield" name="media-model-edit-note-title" id="media-model-edit-note-title" class="text ui-widget-content ui-corner-all" maxLength="32"  /><br/>
    <label for="media-model-path-select">Related set of pins (required)</label>
    <select name="media-model-path-select" id="media-model-path-select" class="text ui-widget-content ui-corner-all">
    </select>
    <label for="media-model-edit-note-text">Annotation (required)</label>
    <textarea name="media-model-edit-note-text" id="media-model-edit-note-text" class="textarea ui-widget-content ui-corner-all"></textarea><br/><br/>
    <input type="checkbox" name="media-model-edit-to-server" id="media-model-edit-to-server" value="" class="text ui-widget-content ui-corner-all" checked />&nbsp;Save to server<br/><small>Annotations saved to server will be accessible to the public for loading.</small>
  </fieldset>
  </form>
  </div>
  </div>
  </div>


<div id="media-model-load-note-form" title="Load saved note">
<div id="media-model-saved-notes-menu">
 <div class="media-model-saved-notes-submenu">
  <ul class="media-model-saved-notes-root" id="media-model-saved-notes-root">
  </ul>

</div>
</div>

<div id="media-model-load-notes-preview">
  <p id="media-model-load-notes-title"></p>
  <p id="media-model-load-notes-note"></p>
  <p id="media-model-load-notes-contains"></p>
  <span id="media-model-load-notes-index" />
</div>
</div>

<div class="media-model-help-overlay">
<p><span class="media-model-help-hide">Hit \'<span class="media-model-help-cata">h</span>\' to hide this menu</span>
</p>
<span class="media-model-help-keyname">left click+drag</span> - Rotate camera around local position<br>
<span class="media-model-help-keyname">alt+left click+drag</span> - Rotate camera around cursor pin<br>
<span class="media-model-help-keyname">middle click+drag</span> - Pan camera<br>
<span class="media-model-help-keyname">double left click</span> - Create/delete pin at cursor pin location<br>
<span class="media-model-help-keyname">mouse wheel</span> - Zoom in/out<br>
<span class="media-model-help-keyname">f</span> - Toggle fullscreen mode<br>
<span class="media-model-help-keyname">n</span> - Switch to next set of pins (change color)<br>
<span class="media-model-help-keyname">l</span> - Switch pins to LINE mode<br>
<span class="media-model-help-keyname">o</span> - Switch pins to POLYGON mode<br>
<span class="media-model-help-keyname">p</span> - Switch pins to POINTS mode<br>
</p>

</div>

<div class="media-model-help-prompt">
<p>Hit \'<span class="media-model-help-cata">h</span>\' to display help
</p>
</div>

  ';
  /*
<p><span class="media-model-help-cata">Viewport:</span><br>

<p><span class="media-model-help-cata">Menu:</span><br>
Use the buttons at the top to export a link to <br/>
your workspace, load a saved note, save a new note,<br/>
or to make changes to your workspace.
</p>
*/
  //ctools_include('plugins');
  //dpm($variables);
  //drupal_set_message('<pre>theme_model variables: ' . print_r($variables, 1) . '</pre>');
  //return 'GLGE';
  // unique id per instance 
  //drupal_add_library('system', 'ui.validate');
  //drupal_add_library('system', 'ui.sortable');
  //drupal_add_js(libraries_get_path('jquery') . '/js/jquery-1.9.1.js');
  //drupal_add_js(libraries_get_path('jquery') . '/js/jquery-ui-1.10.1.custom.js');
  drupal_add_css($mediaPath . '/css/media_model.css');
  drupal_add_js(libraries_get_path('threejs') . '/build/three.js', 'file');
  drupal_add_js($mediaPath . '/js/Detector.js', 'file');
  drupal_add_js($mediaPath . '/js/loaders/MTLLoader.js', 'file');
  drupal_add_js($mediaPath . '/js/loaders/OBJMTLLoader.js', 'file');
  drupal_add_js($mediaPath . '/js/loaders/OBJLoader.js', 'file');
  drupal_add_js($mediaPath . '/js/media_model_path.js', 'file');
  drupal_add_js($mediaPath . '/js/media_model_controls.js', 'file');
  drupal_add_js($mediaPath . '/js/media_model.js', 'file');

  drupal_add_js('
   function media_model_init(){
    if( Detector.webgl )
      {
          media_model_viewer("' . $variables['element']['#file']->fid . '", ' . drupal_json_encode($objPaths) . ', ' . drupal_json_encode($mtlPaths) . ', ' . drupal_json_encode($nmlPaths) . ');
          if( !Detector.fullSupport ){
            var browserWarning = document.createElement( "div" );
            browserWarning.id = "media-model-support-warning";
            browserWarning.innerHTML = "Your browser, " + BrowserDetect.browser + " " + BrowserDetect.version + ", may not support all features.</br>This application runs best on Chrome 18.0+, available free <a href=\'https://www.google.com/intl/en/chrome/browser/\'>here.</a>";
            document.getElementById("media-model-viewport").appendChild(browserWarning);
          }
      }
      else
      {
        Detector.addGetWebGLMessage({id: "media-model-webgl-error", parent: document.getElementById( "file-".concat(' . $variables['element']['#file']->fid . ') )});
      }
   }
   window.onload = media_model_init;
   ', 'inline');

  if($variables['element']['#file']->media_model_notes['has_notes']) {
    $notes = $variables['element']['#file']->media_model_notes['notes_list'];
    if($notes)
      foreach($notes as $note){
        drupal_add_js('
            media_model_append_saved_note("' . 
              $note->title . '","' . 
              $note->text . '","' .
              $note->cam . '","' .
              $note->pins . '","' .
              $note->type . '","' .
              $note->noteid .
            '");
        ', 'inline');
      }
  }

  return $output;
}

function media_model_create_note($fid, $title, $text, $cam, $pins, $type) {
  global $user;

  // Create derivative object.
  $note = new stdClass;
  $note->uid = $user->uid;
  $note->source_fid = $fid;
  $note->title = $title;
  $note->text = $text;
  $note->cam = $cam;
  $note->pins = $pins;
  $note->type = $type;
  $note->created = time();
  $note->changed = time();

  return media_model_note_save($note)->noteid;
}

function media_model_note_save($note){
  $transaction = db_transaction();

  try {
    // Check if this is new.
    $new = !isset($note->noteid);

    // Set created time if new.
    if ($new) {
      $note->created = REQUEST_TIME;
    }

    // Always update changed time.Enter description here ...
    $note->changed = REQUEST_TIME;
    // Write to DB.
    if ($new) {
      drupal_write_record('media_model_notes', $note);
    }
    else {
      drupal_write_record('media_model_notes', $note, 'noteid');
    }

    // Return media note object for saved item.
    return media_model_notes_load($note->noteid);
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('media_model_notes', $e);
    throw $e;
  }
  return $note;
}

function media_model_notes_load($noteid) {
  $notes = media_model_notes_load_multiple(array($noteid));

  return $notes[$noteid];
}

function media_model_notes_load_multiple($noteids) {
  $notes = array();

  foreach ($noteids as $noteid) {
    $note = db_select('media_model_notes', 'mmn')
      ->fields('mmn')
      ->condition('noteid', $noteid)
      ->execute()
      ->fetchObject();

    $notes[$note->noteid] = $note;
  }

  return $notes;
}

function media_model_inform_file_object($file) {
  // Check if has derivatives.
  if (isset($file->fid)) {
    $file->media_model_notes['has_notes'] = FALSE;
    $note = db_select('media_model_notes', 'mmn')
      ->fields('mmn', array('noteid'))
      ->condition('source_fid', $file->fid)
      ->execute();

    while ($noteid = $note->fetchField()) {
      $note_object = media_model_notes_load($noteid);

      $file->media_model_notes['notes_list'][$note_object->noteid] = $note_object;
      $file->media_model_notes['has_notes'] = TRUE;
    }
  }
}

function media_model_file_load($files) {
  foreach ($files as $key => $file) {
      media_model_inform_file_object($files[$key]);
  }
}