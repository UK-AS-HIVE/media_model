<?php

/**
 *  Implement hook_menu.
 */
/*function media_model_menu()
{
  return array(
    'file/%/3d' => array(
      'page callback' => 'media_model_modelview',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
  );
}

function media_model_modelview($fid) {
  return $fid;
}*/

function media_model_file_view_alter(&$build, $type = 'file') {
  // check to make sure it's a file type we support
  if (!isset($build['file']['#file']))
    return;
  $filename = $build['file']['#file']->filename;
  $extension = substr($filename, strlen($filename)-4);
  if ($extension != '.obj' && $extension != '.md2')
    return;

  $build['file']['#file']->type = 'model';
  $build['file']['#theme'] = 'model';
}

/**
 * Implements hook_library().
 */
/*function media_model_library() {
  $path = libraries_get_path('GLGE');
  $libraries = array();

  $libraries['GLGE'] = array(
    'title' => 'GLGE WebGL Engine',
    'website' => 'http://glge.org/',
    'version' => '0.9',
    'js' => array(
      // The mediaelement script detects the path to itself to call other files
      // in the same location. With preprocessing this is problematic as the
      // script is no longer in the same directory as its other assets. There
      // is an option that can be passed into the script with its location.
      // @todo Update all calls to mediaelement to pass in the assets location.
      $path . '/glge-compiled.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
    ),
  );
  return $libraries;
}*/

/**
 * Implements hook_file_type_info().
 */
/*function media_model_file_type_info() {
  return array(
    'model_obj' => array(
      'label' => t('3D Model in .OBJ format'),
      'description' => t('A static polygonal 3D model'),
      'claim callback' => 'media_model_file_type_model_claim',
      'default view callback' => 'media_model_file_type_model_default_view',
      'weight' => -1000,
    ),
  );
}

function media_model_file_type_model_claim($file, $type) {
  dpm($file);
  return TRUE;
}

function media_model_file_type_model_default_view($file, $view_mode, $langcode) {
  dpm($file);
  return array(
    '#type' => 'model',
    '#title' => $file->filename . ' NOAHTESTING',
    '#href' => file_create_url($file->uri),
  );
}*/

/**
 * Implements hook_file_formatter_info().
 */
function media_model_file_formatter_info() {
}

/**
 * Implements hook_field_formatter_info().
 */
function media_model_field_formatter_info() {
  $formatters = array();
/*
  $formatters['glge_objloader'] = array(
    'label' => t('GLGE Wavefront .OBJ viewer'),
    'field types' => array('file', 'model'),
    'settings' => array(
      'width' => variable_get('glge_objloader', '640'),
      'height' => variable_get('glge_objloader', '385'),
    ),
  );*/

    $formatters['threejs_objloader'] = array(
    'label' => t('ThreeJS .OBJ viewer'),
    'field types' => array('file', 'model'),
    'settings' => array(
      'width' => variable_get('threejs_objloader', '640'),
      'height' => variable_get('threejs_objloader', '385'),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
/*function media_model_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  //dpm($entity);
  //dpm($display);
  //dpm($items);
  $element = array();

  foreach ($items as $delta => $item) {
    $settings = $display['settings'];
    if ($display['type'] == 'glge_objloader') {
      dpm($item);
      $element[$delta] = array(
        '#theme' => 'model',
        '#file' => $item,
      );
    }
  }

  return $element;
}*/

/**
 * Implements hook_theme().
 */
function media_model_theme($existing) {
  //dpm($existing);
  return array(
    'model' => array(
      /*'variables' => array(
        'attributes' => array(), 
        'settings' => array(),
      ),*/
      'render element' => 'element',
    ),
  );
}

function media_model_get_materials( $objFileName, $objPath){
  $mmDir = 'public://media_model_files/';
  $baseMtlPath = str_replace('.obj', '.obj.mtl', $objPath);
  $baseJpgPath = str_replace('.obj', '.jpg', $objPath);
  $objName = str_replace('.obj', '', $objFileName);

  $types = array(
    'low' => 512,
    'med' => 2048,
    'high' => 4098,
  );
  $mtlPaths = array();

  file_prepare_directory($mmDir, FILE_CREATE_DIRECTORY);
  if(is_writable($mmDir)) {
    $modMtlPath = $mmDir . $objName . '_default.obj.mtl';
    if(!file_exists($modMtlPath)){
      $mtlBody = file_get_contents($baseMtlPath);
      file_put_contents($modMtlPath, str_replace($objName . '.jpg', file_create_url($baseJpgPath), $mtlBody));
    }
    $mtlPaths['default'] = file_create_url($modMtlPath);
    foreach($types as $type => $pixels) {
      $modMtlPath = $mmDir . $objName . '_' . $type . '.obj.mtl';
      $modJpgPath = $mmDir . $objName . '_' . $type . '.jpg';
      if(!file_exists($modMtlPath)){
        $mtlBody = file_get_contents($baseMtlPath);
        file_put_contents($modMtlPath, str_replace($objName . '.jpg', file_create_url($modJpgPath), $mtlBody));
      }
      if(!file_exists($modJpgPath)){
        $command = 'convert ' . drupal_realpath($baseJpgPath) . ' -resize ' . $pixels . 'x' . $pixels . ' '. drupal_realpath($modJpgPath);
        exec($command, $output=array());
        //dpm($output);
      }
      $mtlPaths[$type] = file_create_url($modMtlPath);
    }
  }
  
  return $mtlPaths;
}

function media_model_get_objs( $objFileName, $baseObjPath){
  $mmDir = 'public://media_model_files/';
  $objName = str_replace('.obj', '', $objFileName);

  $types = array(
    'low' => 5000,
    'med' => 50000,
    'high' => 200000,
  );
  $objPaths = array(
      'default' => file_create_url($baseObjPath)
  );

  file_prepare_directory($mmDir, FILE_CREATE_DIRECTORY);

  if(is_writable($mmDir)) {
    foreach($types as $type => $polycount) {
      $modObjPath = $mmDir . $objName . '_' . $type . '.obj';
      $objPaths[$type] = file_exists($modObjPath) ? file_create_url($modObjPath) : null;
    }
  }
  return $objPaths;
}


function theme_model($variables) {
  static $id=0;
  $objPath = file_create_url($variables['element']['#file']->uri); 

  $mediaPath = drupal_get_path('module', 'media_model');

  $mtlPaths = media_model_get_materials($variables['element']['#file']->filename, $variables['element']['#file']->uri);
  $objPaths = media_model_get_objs($variables['element']['#file']->filename, $variables['element']['#file']->uri);

  drupal_add_library('system', 'ui.dialog');
  drupal_add_js('
    jQuery(document).ready(function(){
      var noteTitle = jQuery("#noteTitle"),
        noteText = jQuery("#noteText"),
        cam = jQuery("#cam"),
        markers = jQuery("#markers");
      jQuery( "#media-model-addnote-form" ).dialog({
        autoOpen: false,
        height: 400,
        width: 600,
        modal: true,
        buttons: {
          "Add note": function() {
              //allFields.removeClass( "ui-state-error" );
              saveNote({
                title: noteTitle.val(),
                text: noteText.val(),
                cam: cam.is(":checked"),
                markers: markers.is(":checked")
              });
              noteTitle.val("");
              noteText.val("");
              //cam.prop("checked", false);
              //markers.prop("checked", false);
              jQuery( this ).dialog( "close" );
          },
          Cancel: function() {
            jQuery( this ).dialog( "close" );
          }
        },
        close: function() {
          //allFields.val( "" ).removeClass( "ui-state-error" );
        }
      });
    })
  ', 'inline');
  $output = '
  <div id="media-model-addnote-form" title="Create new note">
  <form>
  <fieldset>
    <label for="noteTitle">Title</label>
    <input type="textfield" name="noteTitle" id="noteTitle" class="text ui-widget-content ui-corner-all" maxLength="32"  />
    <label for="noteText">Note</label>
    <input type="textarea" name="noteText" id="noteText" class="text ui-widget-content ui-corner-all" />
    <label for="cam">Save camera position</label>
    <input type="checkbox" name="cam" id="cam" value="" class="text ui-widget-content ui-corner-all" />
    <label for="markers">Save marker positions</label>
    <input type="checkbox" name="markers" id="markers" value="" class="text ui-widget-content ui-corner-all" />
  </fieldset>
  </form>
  </div>

<div id="media-model-loadnote-form" title="Load saved note">
<div id="media-model-saved-notes-menu">
 <div class="media-model-saved-notes-submenu">
  <ul class="media-model-saved-notes-root" id="media-model-saved-notes-root">
  </ul>

</div>
</div>

<div id="media-model-load-notes-preview">
  <p id="media-model-load-notes-title"></p>
  <p id="media-model-load-notes-note"></p>
  <p id="media-model-load-notes-contains"></p>
  <span id="media-model-load-notes-index" />
</div>
</div>

<div class="media-model-help-overlay">
<p>Hit \'<span class="media-model-help-cata">h</span>\' to hide this menu
</p>
<p><span class="media-model-help-cata">Viewport:</span><br>
<span class="media-model-help-keyname">left click+drag</span> - Rotate camera around local position<br>
<span class="media-model-help-keyname">alt+left click+drag</span> - Rotate camera around cursor marker<br>
<span class="media-model-help-keyname">middle click+drag</span> - Pan camera<br>
<span class="media-model-help-keyname">double left click</span> - Drop marker at cursor marker<br>
<span class="media-model-help-keyname">mouse wheel</span> - Zoom in/out<br>
</p>
<p><span class="media-model-help-cata">Menu:</span><br>
Drag markers to reorder the path,<br>
or to remove markers from the path!
</p>
</div>

<div class="media-model-help-prompt">
<p>Hit \'<span class="media-model-help-cata">h</span>\' to display help
</p>
</div>

  ';
  //ctools_include('plugins');
  //dpm($variables);
  //drupal_set_message('<pre>theme_model variables: ' . print_r($variables, 1) . '</pre>');
  //return 'GLGE';
  // unique id per instance 
  //drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.sortable');
  //drupal_add_js(libraries_get_path('jquery') . '/js/jquery-1.9.1.js');
  //drupal_add_js(libraries_get_path('jquery') . '/js/jquery-ui-1.10.1.custom.js');
  drupal_add_css($mediaPath . '/media_model.css');
  drupal_add_js(libraries_get_path('threejs') . '/build/three.js', 'file');
  //drupal_add_js(libraries_get_path('threejs') . '/examples/js/loaders/MTLLoader.js', 'file');
  //drupal_add_js(libraries_get_path('threejs') . '/examples/js/loaders/OBJMTLLoader.js', 'file');
  //drupal_add_js(libraries_get_path('threejs') . '/examples/js/loaders/OBJLoader.js', 'file');
  //drupal_add_js(libraries_get_path('threejs') . '/examples/js/libs/stats.min.js', 'file');
  drupal_add_js($mediaPath . '/js/libs/stats.min.js', 'file');
  drupal_add_js($mediaPath . '/js/loaders/MTLLoader.js', 'file');
  drupal_add_js($mediaPath . '/js/loaders/OBJMTLLoader.js', 'file');
  drupal_add_js($mediaPath . '/js/loaders/OBJLoader.js', 'file');
  drupal_add_js($mediaPath . '/js/media_model.js', 'file');
  drupal_add_js($mediaPath . '/js/media_model_controls.js', 'file');

  drupal_add_js('
   var currentURL = "";
   function loadModel(){
    media_model_viewer("' . $variables['element']['#file']->fid . '", ' . drupal_json_encode($objPaths) . ', ' . drupal_json_encode($mtlPaths) . ');
   }
   window.onload = loadModel;
   ', 'inline');

  if($variables['element']['#file']->media_model_notes['has_notes']) {
    $notes = $variables['element']['#file']->media_model_notes['notes_list'];
    if($notes)
      foreach($notes as $note){
        drupal_add_js('
            media_model_append_saved_note("' . 
              $note->title . '","' . 
              $note->text . '","' .
              $note->cam . '","' .
              $note->markers . '","' .
              $note->noteid .
            '");
        ', 'inline');
      }
  }

  return $output;
}

function media_model_create_note($fid, $title, $text, $cam, $markers) {
  global $user;

  // Create derivative object.
  $note = new stdClass;
  $note->uid = $user->uid;
  $note->source_fid = $fid;
  $note->title = $title;
  $note->text = $text;
  $note->cam = $cam;
  $note->markers = $markers;
  $note->created = time();
  $note->changed = time();

  return media_model_note_save($note);
}

function media_model_note_save($note){
  $transaction = db_transaction();

  try {
    // Check if this is new.
    $new = !isset($note->noteid);

    // Set created time if new.
    if ($new) {
      $note->created = REQUEST_TIME;
    }

    // Always update changed time.Enter description here ...
    $note->changed = REQUEST_TIME;
    // Write to DB.
    if ($new) {
      drupal_write_record('media_model_notes', $note);
    }
    else {
      drupal_write_record('media_model_notes', $note, 'noteid');
    }

    // Return media note object for saved item.
    return media_model_notes_load($note->noteid);
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('media_model_notes', $e);
    throw $e;
  }
}

function media_model_notes_load($noteid) {
  $notes = media_model_notes_load_multiple(array($noteid));

  return $notes[$noteid];
}

function media_model_notes_load_multiple($noteids) {
  $notes = array();

  foreach ($noteids as $noteid) {
    $note = db_select('media_model_notes', 'mmn')
      ->fields('mmn')
      ->condition('noteid', $noteid)
      ->execute()
      ->fetchObject();

    $notes[$note->noteid] = $note;
  }

  return $notes;
}

function media_model_inform_file_object($file) {
  // Check if has derivatives.
  if (isset($file->fid)) {
    $file->media_model_notes['has_notes'] = FALSE;
    $note = db_select('media_model_notes', 'mmn')
      ->fields('mmn', array('noteid'))
      ->condition('source_fid', $file->fid)
      ->execute();

    while ($noteid = $note->fetchField()) {
      $note_object = media_model_notes_load($noteid);

      $file->media_model_notes['notes_list'][$note_object->noteid] = $note_object;
      $file->media_model_notes['has_notes'] = TRUE;
    }
  }
}

function media_model_file_load($files) {
  foreach ($files as $key => $file) {
      media_model_inform_file_object($files[$key]);
  }
}